# Imports
import time
import calendar
import requests
import os
import ast
import speech_recognition as sr
import paramiko
import motion
import almath
# Python Image Library
from PIL import Image # works only in local env
from naoqi import ALProxy
from scipy.io.wavfile import write

#Costum dialogs
from dialog import Dialog
Dialog = Dialog()

#NAO Settings
NAOIP = '192.168.0.243'
PORT = 9559
NAME = "nao"
passwd = "19981"
BASE_API = 'http://192.168.0.213:5000'

tts = 'ALTextToSpeech'
text = ALProxy(tts, NAOIP, PORT)
text.setParameter("speed", 80)

#TIMESTAMP
def getTimestamp():
    return str(calendar.timegm(time.gmtime()))

# ACTION
def hulahoop(NAOIP, PORT):
    motionProxy  = ALProxy("ALMotion", NAOIP, PORT)
    postureProxy = ALProxy("ALRobotPosture", NAOIP, PORT)
    # end initialize proxy, begin go to Stand Init

    # Wake up robot
    motionProxy.wakeUp()

    # Send robot to Stand Init
    postureProxy.goToPosture("StandInit", 0.5)

    # end go to Stand Init, begin define control point
    effector        = "Torso"
    frame           =  motion.FRAME_ROBOT
    axisMask        = almath.AXIS_MASK_ALL
    isAbsolute      = True
    useSensorValues = False

    currentTf = almath.Transform(motionProxy.getTransform(effector, frame, useSensorValues))

    # end define control point, begin define target

    # Define the changes relative to the current position
    dx         = 0.03                    # translation axis X (meter)
    dy         = 0.03                    # translation axis Y (meter)
    dwx        = 8.0*almath.TO_RAD       # rotation axis X (rad)
    dwy        = 8.0*almath.TO_RAD       # rotation axis Y (rad)

    # point 01 : forward  / bend backward
    target1Tf = almath.Transform(currentTf.r1_c4, currentTf.r2_c4, currentTf.r3_c4)
    target1Tf *= almath.Transform(dx, 0.0, 0.0)
    target1Tf *= almath.Transform().fromRotY(-dwy)

    # point 02 : right    / bend left
    target2Tf = almath.Transform(currentTf.r1_c4, currentTf.r2_c4, currentTf.r3_c4)
    target2Tf *= almath.Transform(0.0, -dy, 0.0)
    target2Tf *= almath.Transform().fromRotX(-dwx)

    # point 03 : backward / bend forward
    target3Tf = almath.Transform(currentTf.r1_c4, currentTf.r2_c4, currentTf.r3_c4)
    target3Tf *= almath.Transform(-dx, 0.0, 0.0)
    target3Tf *= almath.Transform().fromRotY(dwy)

    # point 04 : left     / bend right
    target4Tf = almath.Transform(currentTf.r1_c4, currentTf.r2_c4, currentTf.r3_c4)
    target4Tf *= almath.Transform(0.0, dy, 0.0)
    target4Tf *= almath.Transform().fromRotX(dwx)

    path = []
    path.append(list(target1Tf.toVector()))
    path.append(list(target2Tf.toVector()))
    path.append(list(target3Tf.toVector()))
    path.append(list(target4Tf.toVector()))

    path.append(list(target1Tf.toVector()))
    path.append(list(target2Tf.toVector()))
    path.append(list(target3Tf.toVector()))
    path.append(list(target4Tf.toVector()))

    path.append(list(target1Tf.toVector()))
    path.append(list(currentTf.toVector()))

    timeOneMove  = 0.5 #seconds
    times = []
    for i in range(len(path)):
        times.append((i+1)*timeOneMove)

    # call the cartesian control API
    motionProxy.transformInterpolations(effector, frame, path, axisMask, times)

    # Go to rest position
    motionProxy.rest()


# DANCE
def dance(NAOIP, PORT):
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[-0.0414599, [3, -0.244444, 0], [3, 0.155556, 0]], [-0.154976, [3, -0.155556, 0.00767002], [3, 0.155556, -0.00767002]], [-0.162646, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.154976, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.154976, [3, -0.133333, 0], [3, 0.155556, 0]], [-0.154976, [3, -0.155556, 0], [3, 0.177778, 0]], [-0.154976, [3, -0.177778, 0], [3, 0.155556, 0]], [-0.154976, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.154976, [3, -0.133333, 0], [3, 0.222222, 0]], [-0.1335, [3, -0.222222, 0], [3, 0.177778, 0]], [-0.145772, [3, -0.177778, 0], [3, 0.222222, 0]], [-0.1335, [3, -0.222222, 0], [3, 0.177778, 0]], [-0.145772, [3, -0.177778, 0], [3, 0.244444, 0]], [-0.1335, [3, -0.244444, 0], [3, 0.2, 0]], [-0.145772, [3, -0.2, 0], [3, 0.266667, 0]], [-0.1335, [3, -0.266667, 0], [3, 0.288889, 0]], [-0.1335, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[-0.00157596, [3, -0.244444, 0], [3, 0.155556, 0]], [-0.214801, [3, -0.155556, 0], [3, 0.155556, 0]], [-0.213269, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.214801, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.2102, [3, -0.133333, 0], [3, 0.155556, 0]], [-0.214801, [3, -0.155556, 0], [3, 0.177778, 0]], [-0.2102, [3, -0.177778, 0], [3, 0.155556, 0]], [-0.214801, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.2102, [3, -0.133333, -0.00460069], [3, 0.222222, 0.00766782]], [-4.19617e-05, [3, -0.222222, 0], [3, 0.177778, 0]], [-4.19617e-05, [3, -0.177778, 0], [3, 0.222222, 0]], [-4.19617e-05, [3, -0.222222, 0], [3, 0.177778, 0]], [-4.19617e-05, [3, -0.177778, 0], [3, 0.244444, 0]], [-4.19617e-05, [3, -0.244444, 0], [3, 0.2, 0]], [-4.19617e-05, [3, -0.2, 0], [3, 0.266667, 0]], [-4.19617e-05, [3, -0.266667, 0], [3, 0.288889, 0]], [-4.19617e-05, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("LAnklePitch")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[-0.113689, [3, -0.244444, 0], [3, 0.155556, 0]], [-0.340721, [3, -0.155556, 0], [3, 0.155556, 0]], [-0.244079, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.340721, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00170743, [3, -0.133333, 0], [3, 0.155556, 0]], [-0.340721, [3, -0.155556, 0], [3, 0.177778, 0]], [-0.00170743, [3, -0.177778, 0], [3, 0.155556, 0]], [-0.340721, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.00170743, [3, -0.133333, 0], [3, 0.222222, 0]], [-0.0139794, [3, -0.222222, 0.0045452], [3, 0.177778, -0.00363616]], [-0.0262515, [3, -0.177778, 0], [3, 0.222222, 0]], [-0.0139794, [3, -0.222222, 0], [3, 0.177778, 0]], [-0.0262515, [3, -0.177778, 0], [3, 0.244444, 0]], [-0.0139794, [3, -0.244444, 0], [3, 0.2, 0]], [-0.0262515, [3, -0.2, 0], [3, 0.266667, 0]], [-0.0139794, [3, -0.266667, -0.00539969], [3, 0.288889, 0.00584967]], [0.00749657, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("LAnkleRoll")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[0.0168944, [3, -0.244444, 0], [3, 0.155556, 0]], [-0.0398637, [3, -0.155556, 0.03068], [3, 0.155556, -0.03068]], [-0.167186, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.0398637, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.265362, [3, -0.133333, 0], [3, 0.155556, 0]], [-0.0398637, [3, -0.155556, 0], [3, 0.177778, 0]], [-0.265362, [3, -0.177778, 0], [3, 0.155556, 0]], [-0.0398637, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.265362, [3, -0.133333, 0], [3, 0.222222, 0]], [-0.259225, [3, -0.222222, -0.00198838], [3, 0.177778, 0.00159071]], [-0.254624, [3, -0.177778, 0], [3, 0.222222, 0]], [-0.259225, [3, -0.222222, 0], [3, 0.177778, 0]], [-0.254624, [3, -0.177778, 0], [3, 0.244444, 0]], [-0.259225, [3, -0.244444, 0], [3, 0.2, 0]], [-0.254624, [3, -0.2, 0], [3, 0.266667, 0]], [-0.259225, [3, -0.266667, 0], [3, 0.288889, 0]], [0.0092244, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[-0.340507, [3, -0.244444, 0], [3, 0.155556, 0]], [-1.54776, [3, -0.155556, 0], [3, 0.155556, 0]], [-1.54163, [3, -0.155556, 0], [3, 0.133333, 0]], [-1.54776, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.54009, [3, -0.133333, 0], [3, 0.155556, 0]], [-1.54776, [3, -0.155556, 0], [3, 0.177778, 0]], [-1.54009, [3, -0.177778, 0], [3, 0.155556, 0]], [-1.54776, [3, -0.155556, 0], [3, 0.133333, 0]], [-1.54009, [3, -0.133333, -0.00766897], [3, 0.222222, 0.0127816]], [-0.814512, [3, -0.222222, -0.164195], [3, 0.177778, 0.131356]], [-0.653443, [3, -0.177778, 0], [3, 0.222222, 0]], [-0.814512, [3, -0.222222, 0], [3, 0.177778, 0]], [-0.653443, [3, -0.177778, 0], [3, 0.244444, 0]], [-0.814512, [3, -0.244444, 0], [3, 0.2, 0]], [-0.653443, [3, -0.2, 0], [3, 0.266667, 0]], [-0.814512, [3, -0.266667, 0], [3, 0.288889, 0]], [-0.558334, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[-0.767043, [3, -0.244444, 0], [3, 0.155556, 0]], [-1.14441, [3, -0.155556, 0.118629], [3, 0.155556, -0.118629]], [-1.47882, [3, -0.155556, 0], [3, 0.133333, 0]], [-1.14441, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.33155, [3, -0.133333, 0], [3, 0.155556, 0]], [-1.14441, [3, -0.155556, 0], [3, 0.177778, 0]], [-1.33155, [3, -0.177778, 0], [3, 0.155556, 0]], [-1.14441, [3, -0.155556, 0], [3, 0.133333, 0]], [-1.33155, [3, -0.133333, 0.0655786], [3, 0.222222, -0.109298]], [-1.66903, [3, -0.222222, 0], [3, 0.177778, 0]], [-1.42666, [3, -0.177778, 0], [3, 0.222222, 0]], [-1.66903, [3, -0.222222, 0], [3, 0.177778, 0]], [-1.42666, [3, -0.177778, 0], [3, 0.244444, 0]], [-1.66903, [3, -0.244444, 0], [3, 0.2, 0]], [-1.42666, [3, -0.2, 0], [3, 0.266667, 0]], [-1.66903, [3, -0.266667, 0.0697051], [3, 0.288889, -0.0755139]], [-1.86232, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[0.916387, [3, -0.244444, 0], [3, 0.155556, 0]], [0.41748, [3, -0.155556, 0.000364006], [3, 0.155556, -0.000364006]], [0.417116, [3, -0.155556, 0], [3, 0.133333, 0]], [0.41748, [3, -0.133333, 0], [3, 0.133333, 0]], [0.41748, [3, -0.133333, 0], [3, 0.155556, 0]], [0.41748, [3, -0.155556, 0], [3, 0.177778, 0]], [0.41748, [3, -0.177778, 0], [3, 0.155556, 0]], [0.41748, [3, -0.155556, 0], [3, 0.133333, 0]], [0.41748, [3, -0.133333, 0], [3, 0.222222, 0]], [0.421116, [3, -0.222222, 0], [3, 0.177778, 0]], [0.421116, [3, -0.177778, 0], [3, 0.222222, 0]], [0.421116, [3, -0.222222, 0], [3, 0.177778, 0]], [0.421116, [3, -0.177778, 0], [3, 0.244444, 0]], [0.421116, [3, -0.244444, 0], [3, 0.2, 0]], [0.421116, [3, -0.2, 0], [3, 0.266667, 0]], [0.421116, [3, -0.266667, 0], [3, 0.288889, 0]], [1, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("LHipPitch")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[0.0749446, [3, -0.244444, 0], [3, 0.155556, 0]], [-0.242594, [3, -0.155556, 0], [3, 0.155556, 0]], [0.438502, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.242594, [3, -0.133333, 0], [3, 0.133333, 0]], [0.271296, [3, -0.133333, 0], [3, 0.155556, 0]], [-0.242594, [3, -0.155556, 0], [3, 0.177778, 0]], [0.271296, [3, -0.177778, 0], [3, 0.155556, 0]], [-0.242594, [3, -0.155556, 0], [3, 0.133333, 0]], [0.271296, [3, -0.133333, -0.00920486], [3, 0.222222, 0.0153414]], [0.286637, [3, -0.222222, -0.0059658], [3, 0.177778, 0.00477264]], [0.303511, [3, -0.177778, 0], [3, 0.222222, 0]], [0.286637, [3, -0.222222, 0], [3, 0.177778, 0]], [0.303511, [3, -0.177778, 0], [3, 0.244444, 0]], [0.286637, [3, -0.244444, 0], [3, 0.2, 0]], [0.303511, [3, -0.2, 0], [3, 0.266667, 0]], [0.286637, [3, -0.266667, 0], [3, 0.288889, 0]], [0.378677, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("LHipRoll")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[-0.0477461, [3, -0.244444, 0], [3, 0.155556, 0]], [0.17315, [3, -0.155556, -0.0122721], [3, 0.155556, 0.0122721]], [0.185422, [3, -0.155556, 0], [3, 0.133333, 0]], [0.17315, [3, -0.133333, 0], [3, 0.133333, 0]], [0.24218, [3, -0.133333, 0], [3, 0.155556, 0]], [0.17315, [3, -0.155556, 0], [3, 0.177778, 0]], [0.24218, [3, -0.177778, 0], [3, 0.155556, 0]], [0.17315, [3, -0.155556, 0], [3, 0.133333, 0]], [0.24218, [3, -0.133333, 0], [3, 0.222222, 0]], [0.22684, [3, -0.222222, 0.00568137], [3, 0.177778, -0.0045451]], [0.211501, [3, -0.177778, 0], [3, 0.222222, 0]], [0.22684, [3, -0.222222, 0], [3, 0.177778, 0]], [0.211501, [3, -0.177778, 0], [3, 0.244444, 0]], [0.22684, [3, -0.244444, 0], [3, 0.2, 0]], [0.211501, [3, -0.2, 0], [3, 0.266667, 0]], [0.22684, [3, -0.266667, 0], [3, 0.288889, 0]], [-0.0324061, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("LHipYawPitch")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[0.0275685, [3, -0.244444, 0], [3, 0.155556, 0]], [-0.523138, [3, -0.155556, 0], [3, 0.155556, 0]], [-0.401951, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.523138, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.357466, [3, -0.133333, 0], [3, 0.155556, 0]], [-0.523138, [3, -0.155556, 0], [3, 0.177778, 0]], [-0.357466, [3, -0.177778, 0], [3, 0.155556, 0]], [-0.523138, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.357466, [3, -0.133333, -0.00644342], [3, 0.222222, 0.010739]], [-0.346727, [3, -0.222222, -0.00369299], [3, 0.177778, 0.00295439]], [-0.337524, [3, -0.177778, 0], [3, 0.222222, 0]], [-0.346727, [3, -0.222222, 0], [3, 0.177778, 0]], [-0.337524, [3, -0.177778, 0], [3, 0.244444, 0]], [-0.346727, [3, -0.244444, 0], [3, 0.2, 0]], [-0.337524, [3, -0.2, 0], [3, 0.266667, 0]], [-0.346727, [3, -0.266667, 0.00515417], [3, 0.288889, -0.00558368]], [-0.369738, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("LKneePitch")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[0.0886521, [3, -0.244444, 0], [3, 0.155556, 0]], [0.775884, [3, -0.155556, 0], [3, 0.155556, 0]], [0.133138, [3, -0.155556, 0], [3, 0.133333, 0]], [0.775884, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00581614, [3, -0.133333, 0], [3, 0.155556, 0]], [0.775884, [3, -0.155556, 0], [3, 0.177778, 0]], [0.00581614, [3, -0.177778, 0], [3, 0.155556, 0]], [0.775884, [3, -0.155556, 0], [3, 0.133333, 0]], [0.00581614, [3, -0.133333, 0], [3, 0.222222, 0]], [0.0226902, [3, -0.222222, -0.00596557], [3, 0.177778, 0.00477245]], [0.0380302, [3, -0.177778, 0], [3, 0.222222, 0]], [0.0226902, [3, -0.222222, 0], [3, 0.177778, 0]], [0.0380302, [3, -0.177778, 0], [3, 0.244444, 0]], [0.0226902, [3, -0.244444, 0], [3, 0.2, 0]], [0.0380302, [3, -0.2, 0], [3, 0.266667, 0]], [0.0226902, [3, -0.266667, 0.00417249], [3, 0.288889, -0.0045202]], [0.0119521, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[1.58765, [3, -0.244444, 0], [3, 0.155556, 0]], [1.45266, [3, -0.155556, 0], [3, 0.155556, 0]], [1.98343, [3, -0.155556, 0], [3, 0.133333, 0]], [1.45266, [3, -0.133333, 0], [3, 0.133333, 0]], [2.0187, [3, -0.133333, 0], [3, 0.155556, 0]], [1.45266, [3, -0.155556, 0], [3, 0.177778, 0]], [2.0187, [3, -0.177778, 0], [3, 0.155556, 0]], [1.45266, [3, -0.155556, 0], [3, 0.133333, 0]], [2.0187, [3, -0.133333, 0], [3, 0.222222, 0]], [-0.72409, [3, -0.222222, 0], [3, 0.177778, 0]], [1.62907, [3, -0.177778, 0], [3, 0.222222, 0]], [-0.72409, [3, -0.222222, 0], [3, 0.177778, 0]], [1.62907, [3, -0.177778, 0], [3, 0.244444, 0]], [-0.72409, [3, -0.244444, 0], [3, 0.2, 0]], [1.62907, [3, -0.2, 0], [3, 0.266667, 0]], [-0.72409, [3, -0.266667, 0], [3, 0.288889, 0]], [0.708667, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[0.303691, [3, -0.244444, 0], [3, 0.155556, 0]], [0, [3, -0.155556, 0], [3, 0.155556, 0]], [0.115008, [3, -0.155556, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.155556, 0]], [0, [3, -0.155556, 0], [3, 0.177778, 0]], [0, [3, -0.177778, 0], [3, 0.155556, 0]], [0, [3, -0.155556, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.222222, 0]], [0.314428, [3, -0.222222, 0], [3, 0.177778, 0]], [0.059784, [3, -0.177778, 0], [3, 0.222222, 0]], [0.314428, [3, -0.222222, 0], [3, 0.177778, 0]], [0.059784, [3, -0.177778, 0], [3, 0.244444, 0]], [0.314428, [3, -0.244444, 0], [3, 0.2, 0]], [0.059784, [3, -0.2, 0], [3, 0.266667, 0]], [0.314428, [3, -0.266667, 0], [3, 0.288889, 0]], [0, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[-1.00328, [3, -0.244444, 0], [3, 0.155556, 0]], [-0.694945, [3, -0.155556, -0.0398843], [3, 0.155556, 0.0398843]], [-0.65506, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.694945, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.688808, [3, -0.133333, 0], [3, 0.155556, 0]], [-0.694945, [3, -0.155556, 0], [3, 0.177778, 0]], [-0.688808, [3, -0.177778, 0], [3, 0.155556, 0]], [-0.694945, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.688808, [3, -0.133333, 0], [3, 0.222222, 0]], [-0.690342, [3, -0.222222, 0], [3, 0.177778, 0]], [-0.681137, [3, -0.177778, 0], [3, 0.222222, 0]], [-0.690342, [3, -0.222222, 0], [3, 0.177778, 0]], [-0.681137, [3, -0.177778, 0], [3, 0.244444, 0]], [-0.690342, [3, -0.244444, 0], [3, 0.2, 0]], [-0.681137, [3, -0.2, 0], [3, 0.266667, 0]], [-0.690342, [3, -0.266667, 0], [3, 0.288889, 0]], [-0.690342, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("RAnklePitch")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[-0.104339, [3, -0.244444, 0], [3, 0.155556, 0]], [0.0398569, [3, -0.155556, 0], [3, 0.155556, 0]], [-0.270011, [3, -0.155556, 0], [3, 0.133333, 0]], [0.0398569, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.451023, [3, -0.133333, 0], [3, 0.155556, 0]], [0.0398569, [3, -0.155556, 0], [3, 0.177778, 0]], [-0.451023, [3, -0.177778, 0], [3, 0.155556, 0]], [0.0398569, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.451023, [3, -0.133333, 0.00460244], [3, 0.222222, -0.00767074]], [-0.458693, [3, -0.222222, 0.00284069], [3, 0.177778, -0.00227255]], [-0.466362, [3, -0.177778, 0], [3, 0.222222, 0]], [-0.458693, [3, -0.222222, 0], [3, 0.177778, 0]], [-0.466362, [3, -0.177778, 0], [3, 0.244444, 0]], [-0.458693, [3, -0.244444, 0], [3, 0.2, 0]], [-0.466362, [3, -0.2, 0], [3, 0.266667, 0]], [-0.458693, [3, -0.266667, -0.00766897], [3, 0.288889, 0.00830805]], [-0.167233, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("RAnkleRoll")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[-0.00456227, [3, -0.244444, 0], [3, 0.155556, 0]], [0.108954, [3, -0.155556, 0], [3, 0.155556, 0]], [0.0859437, [3, -0.155556, 0], [3, 0.133333, 0]], [0.108954, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00464174, [3, -0.133333, 0], [3, 0.155556, 0]], [0.108954, [3, -0.155556, 0], [3, 0.177778, 0]], [0.00464174, [3, -0.177778, 0], [3, 0.155556, 0]], [0.108954, [3, -0.155556, 0], [3, 0.133333, 0]], [0.00464174, [3, -0.133333, 0.000920403], [3, 0.222222, -0.001534]], [0.00310773, [3, -0.222222, 0.000568149], [3, 0.177778, -0.000454519]], [0.00157374, [3, -0.177778, 0], [3, 0.222222, 0]], [0.00310773, [3, -0.222222, 0], [3, 0.177778, 0]], [0.00157374, [3, -0.177778, 0], [3, 0.244444, 0]], [0.00310773, [3, -0.244444, 0], [3, 0.2, 0]], [0.00157374, [3, -0.2, 0], [3, 0.266667, 0]], [0.00310773, [3, -0.266667, -0.001534], [3, 0.288889, 0.00166183]], [0.147304, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[0.305309, [3, -0.244444, 0], [3, 0.155556, 0]], [1.12907, [3, -0.155556, 0], [3, 0.155556, 0]], [1.1214, [3, -0.155556, 0], [3, 0.133333, 0]], [1.12907, [3, -0.133333, 0], [3, 0.133333, 0]], [1.126, [3, -0.133333, 0], [3, 0.155556, 0]], [1.12907, [3, -0.155556, 0], [3, 0.177778, 0]], [1.126, [3, -0.177778, 0], [3, 0.155556, 0]], [1.12907, [3, -0.155556, 0], [3, 0.133333, 0]], [1.126, [3, -0.133333, 0], [3, 0.222222, 0]], [1.33616, [3, -0.222222, 0], [3, 0.177778, 0]], [1.25485, [3, -0.177778, 0], [3, 0.222222, 0]], [1.33616, [3, -0.222222, 0], [3, 0.177778, 0]], [1.25485, [3, -0.177778, 0], [3, 0.244444, 0]], [1.33616, [3, -0.244444, 0], [3, 0.2, 0]], [1.25485, [3, -0.2, 0], [3, 0.266667, 0]], [1.33616, [3, -0.266667, 0], [3, 0.288889, 0]], [0.553816, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[0.786901, [3, -0.244444, 0], [3, 0.155556, 0]], [1.52475, [3, -0.155556, 0], [3, 0.155556, 0]], [1.18574, [3, -0.155556, 0], [3, 0.133333, 0]], [1.52475, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51555, [3, -0.133333, 0], [3, 0.155556, 0]], [1.52475, [3, -0.155556, 0], [3, 0.177778, 0]], [1.51555, [3, -0.177778, 0], [3, 0.155556, 0]], [1.52475, [3, -0.155556, 0], [3, 0.133333, 0]], [1.51555, [3, -0.133333, 0.00920482], [3, 0.222222, -0.0153414]], [1.26397, [3, -0.222222, 0], [3, 0.177778, 0]], [1.27931, [3, -0.177778, 0], [3, 0.222222, 0]], [1.26397, [3, -0.222222, 0], [3, 0.177778, 0]], [1.27931, [3, -0.177778, 0], [3, 0.244444, 0]], [1.26397, [3, -0.244444, 0], [3, 0.2, 0]], [1.27931, [3, -0.2, 0], [3, 0.266667, 0]], [1.26397, [3, -0.266667, 0], [3, 0.288889, 0]], [1.7886, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[0.917842, [3, -0.244444, 0], [3, 0.155556, 0]], [0.411661, [3, -0.155556, 0], [3, 0.155556, 0]], [0.411661, [3, -0.155556, 0], [3, 0.133333, 0]], [0.411661, [3, -0.133333, 0], [3, 0.133333, 0]], [0.411661, [3, -0.133333, 0], [3, 0.155556, 0]], [0.411661, [3, -0.155556, 0], [3, 0.177778, 0]], [0.411661, [3, -0.177778, 0], [3, 0.155556, 0]], [0.411661, [3, -0.155556, 0], [3, 0.133333, 0]], [0.411661, [3, -0.133333, 0], [3, 0.222222, 0]], [0.414571, [3, -0.222222, 0], [3, 0.177778, 0]], [0.414571, [3, -0.177778, 0], [3, 0.222222, 0]], [0.414571, [3, -0.222222, 0], [3, 0.177778, 0]], [0.414571, [3, -0.177778, 0], [3, 0.244444, 0]], [0.414571, [3, -0.244444, 0], [3, 0.2, 0]], [0.414571, [3, -0.2, 0], [3, 0.266667, 0]], [0.414571, [3, -0.266667, 0], [3, 0.288889, 0]], [1, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("RHipPitch")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[0.039827, [3, -0.244444, 0], [3, 0.155556, 0]], [0.315946, [3, -0.155556, 0], [3, 0.155556, 0]], [0.010681, [3, -0.155556, 0], [3, 0.133333, 0]], [0.315946, [3, -0.133333, 0], [3, 0.133333, 0]], [0.042895, [3, -0.133333, 0], [3, 0.155556, 0]], [0.315946, [3, -0.155556, 0], [3, 0.177778, 0]], [0.042895, [3, -0.177778, 0], [3, 0.155556, 0]], [0.315946, [3, -0.155556, 0], [3, 0.133333, 0]], [0.042895, [3, -0.133333, 0], [3, 0.222222, 0]], [0.047497, [3, -0.222222, -0.00170444], [3, 0.177778, 0.00136355]], [0.0520989, [3, -0.177778, 0], [3, 0.222222, 0]], [0.047497, [3, -0.222222, 0], [3, 0.177778, 0]], [0.0520989, [3, -0.177778, 0], [3, 0.244444, 0]], [0.047497, [3, -0.244444, 0], [3, 0.2, 0]], [0.0520989, [3, -0.2, 0], [3, 0.266667, 0]], [0.047497, [3, -0.266667, 0], [3, 0.288889, 0]], [0.243849, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("RHipRoll")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[0.0153604, [3, -0.244444, 0], [3, 0.155556, 0]], [0.0260984, [3, -0.155556, 0], [3, 0.155556, 0]], [-0.144176, [3, -0.155556, 0], [3, 0.133333, 0]], [0.0260984, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0644075, [3, -0.133333, 0], [3, 0.155556, 0]], [0.0260984, [3, -0.155556, 0], [3, 0.177778, 0]], [-0.0644075, [3, -0.177778, 0], [3, 0.155556, 0]], [0.0260984, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.0644075, [3, -0.133333, 0], [3, 0.222222, 0]], [-0.0598056, [3, -0.222222, -0.00170444], [3, 0.177778, 0.00136355]], [-0.0552035, [3, -0.177778, 0], [3, 0.222222, 0]], [-0.0598056, [3, -0.222222, 0], [3, 0.177778, 0]], [-0.0552035, [3, -0.177778, 0], [3, 0.244444, 0]], [-0.0598056, [3, -0.244444, 0], [3, 0.2, 0]], [-0.0552035, [3, -0.2, 0], [3, 0.266667, 0]], [-0.0598056, [3, -0.266667, 0.00460208], [3, 0.288889, -0.00498559]], [-0.200933, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("RKneePitch")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[0.103898, [3, -0.244444, 0], [3, 0.155556, 0]], [0, [3, -0.155556, 0], [3, 0.155556, 0]], [0.570234, [3, -0.155556, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.133333, 0]], [0.665342, [3, -0.133333, 0], [3, 0.155556, 0]], [0, [3, -0.155556, 0], [3, 0.177778, 0]], [0.665342, [3, -0.177778, 0], [3, 0.155556, 0]], [0, [3, -0.155556, 0], [3, 0.133333, 0]], [0.665342, [3, -0.133333, -0.0128858], [3, 0.222222, 0.0214763]], [0.686818, [3, -0.222222, -0.00795417], [3, 0.177778, 0.00636334]], [0.708295, [3, -0.177778, 0], [3, 0.222222, 0]], [0.686818, [3, -0.222222, 0], [3, 0.177778, 0]], [0.708295, [3, -0.177778, 0], [3, 0.244444, 0]], [0.686818, [3, -0.244444, 0], [3, 0.2, 0]], [0.708295, [3, -0.2, 0], [3, 0.266667, 0]], [0.686818, [3, -0.266667, 0.0214763], [3, 0.288889, -0.023266]], [0.243493, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[1.55859, [3, -0.244444, 0], [3, 0.155556, 0]], [2.01572, [3, -0.155556, 0], [3, 0.155556, 0]], [1.48035, [3, -0.155556, 0], [3, 0.133333, 0]], [2.01572, [3, -0.133333, 0], [3, 0.133333, 0]], [1.43893, [3, -0.133333, 0], [3, 0.155556, 0]], [2.01572, [3, -0.155556, 0], [3, 0.177778, 0]], [1.43893, [3, -0.177778, 0], [3, 0.155556, 0]], [2.01572, [3, -0.155556, 0], [3, 0.133333, 0]], [1.43893, [3, -0.133333, 0.175067], [3, 0.222222, -0.291779]], [0.615176, [3, -0.222222, 0.364751], [3, 0.177778, -0.291801]], [-0.530721, [3, -0.177778, 0], [3, 0.222222, 0]], [0.615176, [3, -0.222222, 0], [3, 0.177778, 0]], [-0.530721, [3, -0.177778, 0], [3, 0.244444, 0]], [0.615176, [3, -0.244444, 0], [3, 0.2, 0]], [-0.530721, [3, -0.2, 0], [3, 0.266667, 0]], [0.615176, [3, -0.266667, 0], [3, 0.288889, 0]], [0.529271, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[-0.296104, [3, -0.244444, 0], [3, 0.155556, 0]], [-0.082878, [3, -0.155556, -0.047554], [3, 0.155556, 0.047554]], [-0.01078, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.082878, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.081344, [3, -0.133333, 0], [3, 0.155556, 0]], [-0.082878, [3, -0.155556, 0], [3, 0.177778, 0]], [-0.081344, [3, -0.177778, 0], [3, 0.155556, 0]], [-0.082878, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.081344, [3, -0.133333, 0], [3, 0.222222, 0]], [-0.460242, [3, -0.222222, 0.110789], [3, 0.177778, -0.088631]], [-0.679603, [3, -0.177778, 0], [3, 0.222222, 0]], [-0.460242, [3, -0.222222, 0], [3, 0.177778, 0]], [-0.679603, [3, -0.177778, 0], [3, 0.244444, 0]], [-0.460242, [3, -0.244444, 0], [3, 0.2, 0]], [-0.679603, [3, -0.2, 0], [3, 0.266667, 0]], [-0.460242, [3, -0.266667, -0.107257], [3, 0.288889, 0.116195]], [-0.00924597, [3, -0.288889, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([0.733333, 1.2, 1.66667, 2.06667, 2.46667, 2.93333, 3.46667, 3.93333, 4.33333, 5, 5.53333, 6.2, 6.73333, 7.46667, 8.06667, 8.86667, 9.73333])
    keys.append([[0.946436, [3, -0.244444, 0], [3, 0.155556, 0]], [0.76389, [3, -0.155556, 0], [3, 0.155556, 0]], [0.766959, [3, -0.155556, 0], [3, 0.133333, 0]], [0.76389, [3, -0.133333, 0.00102276], [3, 0.133333, -0.00102276]], [0.760822, [3, -0.133333, 0], [3, 0.155556, 0]], [0.76389, [3, -0.155556, 0], [3, 0.177778, 0]], [0.760822, [3, -0.177778, 0], [3, 0.155556, 0]], [0.76389, [3, -0.155556, 0], [3, 0.133333, 0]], [0.760822, [3, -0.133333, 0], [3, 0.222222, 0]], [0.77923, [3, -0.222222, 0], [3, 0.177778, 0]], [0.777696, [3, -0.177778, 0], [3, 0.222222, 0]], [0.77923, [3, -0.222222, 0], [3, 0.177778, 0]], [0.777696, [3, -0.177778, 0], [3, 0.244444, 0]], [0.77923, [3, -0.244444, 0], [3, 0.2, 0]], [0.777696, [3, -0.2, 0], [3, 0.266667, 0]], [0.77923, [3, -0.266667, 0], [3, 0.288889, 0]], [0.77923, [3, -0.288889, 0], [3, 0, 0]]])

    motion = ALProxy("ALMotion", NAOIP, PORT)
    motion.angleInterpolationBezier(names, times, keys)

class Functions:
    @staticmethod
    def emotionDetectionWithPic(NAOIP, PORT, camera, resolution, colorSpace, images_folder):
        naoImage = Functions.takePicture(NAOIP, PORT, camera, resolution, colorSpace, images_folder) 
        response_ed = requests.get(BASE_API + '/emotiondetection/' + naoImage)
        while response_ed.status_code != 200:
            text.say('Face not found.')
            os.remove(os.path.join(images_folder, naoImage))
            try: 
                naoImage = Functions.takePicture(NAOIP, PORT, camera, resolution, colorSpace, images_folder)
                response_ed = requests.get(BASE_API + '/emotiondetection/' + naoImage)
            except ValueError:
                print(response_ed)
        result_ed = ast.literal_eval(response_ed.json())
        return result_ed, naoImage

    @staticmethod
    def takePicture(IP, PORT, camera, resolution, colorSpace, location):
        camProxy = ALProxy('ALVideoDevice', IP, PORT)
        videoClient = camProxy.subscribeCamera('python_client', camera, resolution, colorSpace, 5)
        naoImage = camProxy.getImageRemote(videoClient)
        camProxy.unsubscribe(videoClient)
        imageName = 'image_' + getTimestamp() + '.png' # example: image_{time_stamp}.png
        im = Image.frombytes('RGB', (naoImage[0], naoImage[1]), naoImage[6]) # naoImage[0] = width, naoImage[1] = height, naoImage[6] = image data as ASCII char array
        im.save(location + os.sep + imageName, 'PNG')
        print('Image: ' + imageName + ' successfully saved @ ' + location)
        return imageName

    #Record Audio 
    @staticmethod
    def record_audio(NAOIP, PORT, t):
        recorderProxy = ALProxy("ALAudioRecorder", NAOIP, PORT)
        leds = ALProxy("ALLeds",NAOIP,PORT)
        recorderProxy.stopMicrophonesRecording()
        nao_recordings_path = "/home/nao/nao_solutions/wavs/"
        
        #settings
        audioName = 'name_' + getTimestamp() + '.wav'
        remoteaudiofilepath = nao_recordings_path + audioName

        # configure channels
        # left, right, front rear (mics?)
        channels = (1, 0, 0, 0); # python tuple, C++ code uses AL:ALValue
        recorderProxy.startMicrophonesRecording("/home/nao/nao_solutions/wavs/" + audioName, "wav", 16000, channels)
        #audio_file = recorderProxy.post.startMicrophonesRecording("/home/nao/nao_solutions/wavs/"+audioName, "wav", 16000, channels)
        #leds.rotateEyes(0x000000FF,1,t)
        # continue recording for t seconds
        time.sleep(t)

        # stop recording
        recorderProxy.stopMicrophonesRecording()
        
        return remoteaudiofilepath


    #Speech2Text
    @staticmethod
    def speech_recognition(remoteaudiofilepath):
        transport = paramiko.Transport((NAOIP, 22))
        transport.connect(username=NAME, password=passwd)
        print('Started Dialog...')
        sftp = transport.open_sftp_client()
        audio_file = sftp.open(remoteaudiofilepath)

        r = sr.Recognizer()
        with sr.AudioFile(audio_file) as file:
            audio_file = r.listen(file)
            try:
                # using google speech recognition
                text_data = str(r.recognize_google(audio_file))
                sftp.remove(remoteaudiofilepath)
                return text_data
            except sr.UnknownValueError:
                sftp.remove(remoteaudiofilepath)

    ##########################
    # Name 2 Text Functiions #
    ##########################
    @staticmethod
    def record_name(NAOIP, PORT, record_name_time):
        text.say(Dialog.say_name)
        recording = Functions.record_audio(NAOIP, PORT, record_name_time)
        name_of_user = Functions.speech_recognition(recording)
        return name_of_user

    @staticmethod
    def name_loop(NAOIP, PORT, record_name_time, name_of_user):
        while name_of_user == None:
            text.say(Dialog.sorry_message[0])
            time.sleep(1)
            name_of_user = Functions.record_name(NAOIP, PORT, record_name_time)
        return name_of_user

    @staticmethod
    def confirm(NAOIP, PORT, record_confirm_time, name_of_user):
        text.say(Dialog.conformation_message_with_name(name_of_user))
        recording = Functions.record_audio(NAOIP, PORT, record_confirm_time)
        conformation = Functions.speech_recognition(recording)
        return conformation

    @staticmethod
    def confirm_loop(NAOIP, PORT, record_confirm_time, conformation, name_of_user):
        while conformation not in ["yes", "no"]:
            text.say(Dialog.sorry_message[0])
            time.sleep(1)
            text.say(Dialog.confirm_loop_with_name(name_of_user))
            recording = Functions.record_audio(NAOIP, PORT, record_confirm_time)
            conformation = Functions.speech_recognition(recording)
        return conformation

    @staticmethod
    def knowledgebase_entry(NAOIP, PORT, record_confirm_time, conformation, name_of_user):
        while conformation in ["yes", "no"]:
            if conformation == 'yes':
                text.say(Dialog.knownledge_base_entry(name_of_user))
                break
            elif conformation == 'no':
                text.say(Dialog.sorry_message[2])
                recording = Functions.record_audio(NAOIP, PORT, 5)
                name_of_user = Functions.speech_recognition(recording)
                name_of_user = Functions.name_loop(NAOIP, PORT, record_confirm_time, name_of_user)
                conformation = Functions.confirm(NAOIP, PORT, record_confirm_time, name_of_user)
                conformation = Functions.confirm_loop(NAOIP, PORT, record_confirm_time, conformation, name_of_user)
        return name_of_user

    # MEGA FUNCTION !!!!
    @staticmethod
    def get_and_save_name(NAOIP, PORT):
        name_of_user = Functions.record_name(NAOIP, PORT, 5)
        name_of_user = Functions.name_loop(NAOIP, PORT, 5, name_of_user)
        conformation = Functions.confirm(NAOIP, PORT, 3, name_of_user)
        conformation = Functions.confirm_loop(NAOIP, PORT, 3, conformation, name_of_user)
        final_name = Functions.knowledgebase_entry(NAOIP, PORT, 3, conformation, name_of_user)
        return final_name


    #########################
    # DELETE USER FUNCTIONS #
    #########################

    @staticmethod
    def deletion_recording(NAOIP, PORT, record_name_time):
        text.say(Dialog.user_deletion[0])
        recording = Functions.record_audio(NAOIP, PORT, record_name_time)
        conformation_delete_user = Functions.speech_recognition(recording)
        return conformation_delete_user

    @staticmethod
    def delete_confirm_loop(NAOIP, PORT, record_confirm_time, conformation_delete_user, name_of_user):
        while conformation_delete_user not in ["yes", "no"]:
            text.say(Dialog.confirm_user_deletion_loop(name_of_user))
            recording = Functions.record_audio(NAOIP, PORT, record_confirm_time)
            conformation_delete_user = Functions.speech_recognition(recording)
            print(conformation_delete_user)
        return conformation_delete_user

    @staticmethod
    def confirm_deletion(conformation_delete_user, img_id, name):
        if conformation_delete_user == 'yes':
            text.say(Dialog.user_deletion[1])
            #API
            requests.get(BASE_API + '/deleteperson/' + img_id)
            text.say(Dialog.user_deletion[2])
        else:
            text.say(Dialog.no_deletion(name))

    # MEGA FUNCTION
    @staticmethod
    def delete_user(name, img_id):
        user_deletion = Functions.deletion_recording(NAOIP, PORT, 2)
        user_deletion = Functions.delete_confirm_loop(NAOIP, PORT, 2, user_deletion, name)
        final_decision = Functions.confirm_deletion(user_deletion, img_id, name)
        return final_decision


    #############################
    # MANUAL EMOTION DETECTION #
    #############################

    @staticmethod
    def emotion_recording(NAOIP, PORT, record_name_time):
        text.say(Dialog.emotion_recording[0])
        recording = Functions.record_audio(NAOIP, PORT, record_name_time)
        emotion_rating = Functions.speech_recognition(recording)
        return emotion_rating

    @staticmethod
    def emotion_recording_loop(NAOIP, PORT, record_name_time, emotion_rating, name_of_user):
        while emotion_rating not in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]:
            text.say(Dialog.invalid_emotion(name_of_user))
            recording = Functions.record_audio(NAOIP, PORT, record_name_time)
            emotion_rating = Functions.speech_recognition(recording)
        return emotion_rating

    @staticmethod
    def confirm_emotion(NAOIP, PORT, record_confirm_time, emotion_rating, name_of_user):
        text.say(Dialog.emotion_conformation(name_of_user, emotion_rating))
        recording = Functions.record_audio(NAOIP, PORT, record_confirm_time)
        conformation = Functions.speech_recognition(recording)
        return conformation

    @staticmethod
    def confirm_emotion_loop(NAOIP, PORT, record_confirm_time, conformation, emotion_rating, name_of_user):
        while conformation not in ["yes", "no"]:
            text.say(Dialog.sorry_message[0])
            time.sleep(1)
            text.say(Dialog.emotion_invalid_confirmation(emotion_rating))
            recording = Functions.record_audio(NAOIP, PORT, record_confirm_time)
            conformation = Functions.speech_recognition(recording)
        return conformation

    @staticmethod
    def final_rating(NAOIP, PORT, record_confirm_time, confirm_rating,emotion_rating, name_of_user):
        while confirm_rating in ["yes", "no"]:
            if confirm_rating == 'yes':
                text.say(Dialog.emotion_recording[1])
                break
            elif confirm_rating == 'no':
                text.say(Dialog.emotion_recording[2])
                recording = Functions.record_audio(NAOIP, PORT, 2)
                emotion_rating = Functions.speech_recognition(recording)
                emotion_rating = Functions.emotion_recording_loop(NAOIP, PORT, record_confirm_time, emotion_rating, name_of_user)
                confirm_rating = Functions.confirm_emotion(NAOIP, PORT, record_confirm_time, emotion_rating, name_of_user)
                confirm_rating = Functions.confirm_emotion_loop(NAOIP, PORT, record_confirm_time, confirm_rating, emotion_rating, name_of_user)
        emotion_rating = int(emotion_rating)
        return emotion_rating

    @staticmethod
    def manual_emotion(name_of_user):
        emotion_rating = Functions.emotion_recording(NAOIP, PORT, 2)
        emotion_rating = Functions.emotion_recording_loop(NAOIP, PORT, 2, emotion_rating, name_of_user)
        confirm_rating = Functions.confirm_emotion(NAOIP, PORT, 2, emotion_rating, name_of_user)
        confirm_rating = Functions.confirm_emotion_loop(NAOIP, PORT, 2, confirm_rating, emotion_rating, name_of_user)
        final_emotion_rating = Functions.final_rating(NAOIP, PORT, 2, confirm_rating, emotion_rating, name_of_user)
        return final_emotion_rating



    #############################
    # EMOTIONMATCHING FUNCTIONS #
    #############################

    #To-do: Check if it's possible to access entertainment/moods choreograph-functions in python // jokes
    @staticmethod
    def action(emotion_number, emotion, name_of_user):
        if emotion_number in [1,2,3,4,5]:
            if emotion == 'happy':
                text.say('You seem to be lying!')
                text.say(Dialog.random_joke(name_of_user))
                #action Confused?
                #hulahoop(NAOIP, PORT)
                dance(NAOIP, PORT)
            else:
                text.say('Let me try to cheer you up!')
                text.say(Dialog.random_joke(name_of_user))
                #action Hulahup?
                #hulahoop(NAOIP, PORT)
                dance(NAOIP, PORT)
        else:
            if emotion == 'happy':
                text.say('I am glad that you are in a good mood!')
                text.say(Dialog.random_joke(name_of_user))
                #action Excited?
                #hulahoop(NAOIP, PORT)
                dance(NAOIP, PORT)
            else:
                text.say('Hmm your expression earlier told me otherwise.')
                text.say(Dialog.random_joke(name_of_user))
                #action Confused?
                #hulahoop(NAOIP, PORT)
                dance(NAOIP, PORT)

    @staticmethod
    # To-Do: Create new elif statements
    #Caught all possible outcomes?
    def emotionchange(emotion, emotion2):
            negative = ['angry', 'disgust', 'fear', 'sad']
            neutral = ['neutral']
            positive = ['happy', 'surprised']
            if emotion in positive and emotion2 in positive:
                text.say('I am glad I could keep you happy.')
            elif emotion in positive and emotion2 not in positive:
                text.say('Looks like I made your mood worse. Sorry about that!')
            elif emotion in negative and emotion2 in negative or emotion in neutral and emotion2 in neutral:
                text.say('Looks like I could not change your mood.')
            elif emotion in negative or neutral and emotion2 in positive:
                text.say('I am glad I could brighten up your mood.')